#+TITLE: Qtile
#+Subtitle: Like XMonad, but in python.
#+startup: fold
#+property: header-args :mkdirp yes
#+property: header-args:python :tangle config.py

This file serves as the documentation and source code for my configuration of Qtile.

* Global Imports
These must be imported for my config to work.
#+begin_src python
import os
import re
import socket
import subprocess
from typing import List  # noqa: F401
from libqtile import hook
from libqtile.config import EzKey as Key

from theme.colors import gruvbox as colors
from theme.layouts import layouts, floating_layout
from theme.bars import mainbar, widget_defaults

from settings.screens import screens
from settings.keybinds import keys
from settings.groups import groups

#+end_src


* Colors
:PROPERTIES:
:header-args:python: :tangle theme/colors.py
:END:
** Gruvbox
I’ve been using gruvbox as my colorscheme for about a year now, and I really like it.
#+begin_src python
gruvbox = {
    "bg": "#282828",
    "bg-bright": "#32302f",
    "bg-dark": "#1d2021",
    "fg": "#ebdbb2",
    "red": "#cc241d",
    "green": "#98971a",
    "yellow": "#d79921",
    "blue": "#458588",
    "purple": "#b16286",
    "teal": "#689d6a",
    "orange": "#d65d0e",
    "gray": "#928374",
    }
#+end_src


* Layouts
:PROPERTIES:
:header-args:python: :tangle theme/layouts.py
:END:
I have only a few layouts I'd like to use - a master/stack layout like in XMonad, and then a maximized layout.
** Imports
#+begin_src python
from libqtile import layout
from libqtile.config import Match
from theme.colors import gruvbox as colors
#+end_src

** Layout Theming
#+begin_src python
layout_theme = {
    "margin": 10,
    "border_focus": colors['purple'],
    "border_normal": colors['bg'],
    "border_width": 2
}
#+end_src

** My Layouts
#+begin_src python
layouts = [
    layout.MonadTall(**layout_theme),
    layout.Max(**layout_theme),
]
#+end_src

** Floating Layout
#+begin_src python
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
], **layout_theme)

#+end_src

* Bars
:PROPERTIES:
:header-args:python: :tangle theme/bars.py
:END:
** Imports
#+begin_src python
from libqtile import bar, widget
from theme.colors import gruvbox as colors
import os
import subprocess
#+end_src

** Defaults
#+begin_src python
widget_defaults = dict(
    font='Iosevka Nerd Font',
    fontsize=14,
    padding=3,
    background = colors['bg'],
    foreground = colors['fg'],
)

extension_defaults = widget_defaults.copy()
#+end_src

** Arrow Functions
These arrow functions are for achieving a powerline-esque effect in the qtile bar. Note that you will need a Nerd Font in order to use this.
#+begin_src python
def draw_arrow_right(bg,fg,font_size=33):
    "Creates a textbox widget with a right-pointing arrow."
    return widget.TextBox(text="",
                          padding=0,
                          fontsize=font_size,
                          background=bg,
                          foreground=fg)

def draw_arrow_left(bg,fg,font_size=33):
    "Creates a textbox widget with a right-pointing arrow."
    return widget.TextBox(text="\ue0b2",
                          padding=0,
                          fontsize=font_size,
                          background=bg,
                          foreground=fg)

#+end_src

** Weather Locations
I like being able to quickly glance at the current weather in my bar, and this just lets me do that.
#+begin_src python
wttr_locs = [
    {"home": "Charlottesville"},
]
#+end_src

** Main Bar
#+begin_src python
mainbar = bar.Bar([
    widget.Sep(linewidth = 0,
               padding = 6,
               background=colors['blue']),
    widget.TextBox(text="",
                   font="Material Icons 12",
                   background=colors['blue']),
    widget.Clock(format="%H:%M - %a, %d %b",
                 background=colors['blue']),
    draw_arrow_right(colors['bg'],colors['blue']),
    widget.GroupBox(disable_drag=True),
    
    draw_arrow_right(colors['purple'],colors['bg']),
    widget.CurrentLayout(background=colors['purple']),
    draw_arrow_right(colors['bg'],colors['purple']),
    widget.Spacer(),
    draw_arrow_left(colors['bg'], colors['orange']),
    widget.Wlan(format="INT: {essid}",
                disconnected_message="INT: Not Connected ",
                background=colors['orange']),
    draw_arrow_left(colors['orange'],colors['purple']),
   widget.Battery(format="BAT: {percent:2.0%}",
                   show_short_text = False,
                   background=colors['purple']),
    #widget.PulseVolume(emoji=True, fontsize=12), 
    draw_arrow_left(colors['purple'],colors['blue']),
    widget.GenPollText(update_interval=None, 
                       func=lambda: subprocess.check_output(os.path.expanduser("~/.dotfiles/qtile/.config/qtile/scripts/printvol.sh")).decode('utf-8'),
                       background=colors['blue']),
    widget.Systray(), 

        ], 30, background=colors['bg'], )
#+end_src

* Screens
:PROPERTIES:
:header-args:python: :tangle settings/screens.py
:END:
Screens are just your monitors in qtile.
** Imports
#+begin_src python
from libqtile.config import Screen
from theme.bars import mainbar
#+end_src

** My Screens
#+begin_src python
screens = [
    Screen(top=mainbar),
]

#+end_src

* Groups
:PROPERTIES:
:header-args:python: :tangle settings/groups.py
:END:
Groups are just workspaces in qtile.
** Imports
#+begin_src python
from libqtile.config import Group, DropDown, ScratchPad, Match
#+end_src

** My Groups of Choice
Still in progress.
#+begin_src python
groups = [Group("1", label="WEB", layout='monadtall', matches=[
    Match(wm_class=["firefox"])]),
          Group("2", layout='monadtall'),
          Group("3", layout='monadtall'),
          Group("4", layout='monadtall'),
          Group("5", layout='monadtall'),
          Group("6", layout='monadtall'),
          Group("7", layout='monadtall'),
          Group("8", layout='max'),
          Group("9", layout='max')]
#+end_src


* Keybindings
:PROPERTIES:
:header-args:python: :tangle settings/keybinds.py
:END:

My keybinds are mostly vim-inspired, though I like to have a few keychords in case I need them.
** Imports
#+begin_src python
from libqtile.config import KeyChord
from libqtile.config import EzKey as Key
from libqtile.lazy import lazy
from settings.groups import groups
#+end_src

** A Few Variables
#+begin_src python
mod = "mod4"
terminal = "alacritty"
browser = "firefox"
#+end_src

** Core Binds
#+begin_src python
core_binds = [
    Key("M-h", lazy.layout.left(), desc="Move focus to left"),
    Key("M-l", lazy.layout.right(), desc="Move focus to right"),
    Key("M-j", lazy.layout.down(), desc="Move focus down"),
    Key("M-k", lazy.layout.up(), desc="Move focus up"),
    Key("M-<space>", lazy.layout.next(), desc="Move window focus to other window"),
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    Key("M-S-h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key("M-S-l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key("M-S-j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key("M-S-k", lazy.layout.shuffle_up(), desc="Move window up"),
    Key("M-C-h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key("M-C-l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key("M-C-j", lazy.layout.grow_down(), desc="Grow window down"),
    Key("M-C-k", lazy.layout.grow_up(), desc="Grow window up"),
     Key("M-<equal>", lazy.layout.grow()),
    Key("M-<minus>", lazy.layout.shrink()),
    Key("M-0", lazy.layout.reset()),
    Key("M-S-q", lazy.window.kill(), desc="Kill focused window"),
    Key("M-S-r", lazy.restart(), desc="Restart Qtile"),
    Key("M-S-p", lazy.spawn("rofi -show powermenu -modi powermenu:~/.dotfiles/rofi/.config/rofi/scripts/power.sh -theme-str '#window { height: 55%;} listview { columns: 1;}'"), desc="Manage machine power state"),
    Key("M-f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen"),
    Key("M-S-f", lazy.window.toggle_floating(), desc="Toggle floating layout"),
    Key("M-<Tab>", lazy.next_layout()),
    Key("<XF86AudioLowerVolume>", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    Key("<XF86AudioRaiseVolume>", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),

    Key("<XF86AudioMute>", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
]

keys = core_binds.copy()
#+end_src

** Applications
#+begin_src python
app_bindings = [
    Key("M-r", lazy.spawn("rofi -show drun")),
    Key("M-<Return>", lazy.spawn(terminal), desc="Launch terminal"),
    Key("M-S-<Return>", lazy.spawn(browser), desc="Open Firefox"),
    ]

for keybind in app_bindings:
    keys.append(keybind)
#+end_src

*** Emacs Applications
#+begin_src python
emacs_apps = KeyChord([mod], "e", [
    Key("e", lazy.spawn("emacsclient -cs 'jmacs' -a 'emacs'"), desc="Spawn emacs client"),
    Key("n", lazy.spawn("emacsclient -cs 'jmacs' -e '(elfeed)'"), desc="Spawn emacs client"),
])

keys.append(emacs_apps)
#+end_src

** Groups
#+begin_src python
for group in groups:
    keys.extend([
      Key("M-{}".format(group.name), lazy.group[group.name].toscreen(), desc="Switch to group {}".format(group.name)),
      Key("M-S-{}".format(group.name), lazy.window.togroup(group.name), desc="Move focused window to group {}".format(group.name)) 
    ])
#+end_src


* Hooks
** Autostart Apps
I want some apps to start when I log in to qtile.
#+begin_src python
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/scripts/autostart.sh'])
#+end_src

* Scripts
** Print Volume 
:PROPERTIES:
:header-args: :tangle scripts/printvol.sh
:END:
This script just prints the volume.
#+begin_src sh :shebang "#!/usr/bin/env bash"
VOL=$(pacmd list-sinks|grep -A 15 '* index'| awk '/volume: front/{ print $5 }' | sed 's/[%|,]//g' | xargs)

MUTED=$(pacmd list-sinks|grep -A 15 '* index'|awk '/muted:/{ print $2 }')

if [[ $MUTED == "yes" ]] 
then
    printf "VOL: %s" "Muted"
else
    printf "VOL: %s%%" "$VOL"
fi


#+end_src

** Autostart
:PROPERTIES:
:header-args: :tangle scripts/autostart.sh
:END:
#+begin_src sh :shebang "#!/usr/bin/env bash"
xset b off
xrandr --output eDP1 --mode 1368x768
feh --bg-center ~/.dotfiles/wallpapers/gruvbox/pacman.png
redshift -l $(curl -s "https://location.services.mozilla.com/v1/geolocate?key=geoclue" | jq '.location.lat, .location.lng' | tr '\n' ':' | sed 's/:$//') &
emacs --daemon &
picom -b
#+end_src


