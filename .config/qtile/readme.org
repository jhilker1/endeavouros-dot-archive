#+TITLE: Qtile
#+Subtitle: Like XMonad, but in python.
#+startup: fold
#+property: header-args :mkdirp yes
#+property: header-args:python :tangle config.py

This file serves as the documentation and source code for my configuration of Qtile.

* Global Imports
These must be imported in order for my config to work.
#+begin_src python
import os
import re
import socket
import subprocess
from typing import List  # noqa: F401

from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy
from libqtile.config import Match, Screen, Group, DropDown, ScratchPad, KeyChord
from libqtile.config import EzKey as Key, EzClick as Click, EzDrag as Drag

from theme import fonts, gruvbox as colors
#+end_src


* A Few Variables
I like to have the Super (or Windows) key as my modkey, alacritty as my terminal, and firefox as my browser.
#+begin_src python
mod = "mod4"
terminal = "alacritty"
browser = "firefox"
#+end_src


* Core Theming
:PROPERTIES:
:header-args:python: :tangle theme.py
:END:
This basic module describes my theme options for qtile.
** Colors
*** Gruvbox
I’ve been using gruvbox as my colorscheme for about a year now, and I really like it.
#+begin_src python
gruvbox = {
    "bg": "#282828",
    "bg-bright": "#32302f",
    "bg-dark": "#1d2021",
    "fg": "#ebdbb2",
    "red": "#cc241d",
    "green": "#98971a",
    "yellow": "#d79921",
    "blue": "#458588",
    "purple": "#b16286",
    "teal": "#689d6a",
    "orange": "#d65d0e",
    "gray": "#928374",
    }
#+end_src

*** TODO My Scheme
I am currently working on my own color scheme, and this is that scheme.
#+begin_src python
my_scheme = {}
#+end_src

** Fonts
I have 2 main font I like to use - Iosevka Nerd Font for my text font, and Material Material for my material.
#+begin_src python
fonts = {
    "text": "Iosevka Nerd Font",
    "material": "Material Icons 12",
    "fa": "FontAwesome 12"
}
#+end_src

* Groups
Groups are your workspaces in Qtile.
#+begin_src python
groups = [Group("1", label="", layout='monadtall', matches=[
    Match(wm_class=["firefox", "qutebrowser"]),
]),
          Group("2", label="", layout='monadtall', matches=[
              Match(title=["Emacs"])
          ]),
          Group("3", label="", layout='monadtall', matches=[
              Match(title=["Alacritty"])
          ]),
          
          Group("4", label="", layout='monadtall', matches=[
              Match(title=["Discord", "Discord Updater"]),
          ]),
          Group("5", label="", layout='monadtall', matches=[
              Match(title=["Steam"]),
          ]),
          Group("6", label="", layout='monadtall', matches=[
              Match(title=["ncspot"])
          ]),
          Group("7", label="", layout='max', matches=[
              Match(title=["GNU Image Manipulation Program"]),
              Match(wm_class=["feh"])
          #    Match(wm_class=["Godot"]), # Wonderdraft
          ]),
          Group("8", label="", layout='max'),

          Group("9", label="", layout='max')]
#+end_src

* Keybindings
My keybindings aren't really that special - I try to keep them vim-based, or as close to vim-based as I can. I am organizing them based on a general category - such as my core bindings, other applications, etc.
#+begin_src python
keys = [
    Key("M-h", lazy.layout.left(), desc="Move focus to left"),
    Key("M-l", lazy.layout.right(), desc="Move focus to right"),
    Key("M-j", lazy.layout.down(), desc="Move focus down"),
    Key("M-k", lazy.layout.up(), desc="Move focus up"),
    Key("M-S-h", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key("M-S-l", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key("M-S-j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key("M-S-k", lazy.layout.shuffle_up(), desc="Move window up"),
    Key("M-C-h", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key("M-C-l", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key("M-C-j", lazy.layout.grow_down(), desc="Grow window down"),
    Key("M-C-k", lazy.layout.grow_up(), desc="Grow window up"),
    Key("M-C-<equal>", lazy.layout.grow()),
    Key("M-C-<minus>", lazy.layout.shrink()),
    Key("M-C-0", lazy.layout.reset()),

    Key("M-S-q", lazy.window.kill(), desc="Kill focused window"),
    Key("M-S-r", lazy.restart(), desc="Restart Qtile"),
    Key("M-S-p", lazy.spawn("rofi -show powermenu -theme-str 'window { height: 55%;}' "), desc="Manage machine power state"),
    Key("M-f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen"),
    Key("M-S-f", lazy.window.toggle_floating(), desc="Toggle floating layout"),

    Key("M-<Tab>", lazy.next_layout()),
    Key("<XF86AudioLowerVolume>", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
    Key("<XF86AudioRaiseVolume>", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
    Key("<XF86AudioMute>", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),

    Key("M-r", lazy.spawn("rofi -show drun")),
    Key("M-s", lazy.spawn("alacritty -t 'ncspot' -e 'ncspot'")),
    Key("M-<Return>", lazy.spawn(terminal), desc="Launch terminal"),
    Key("M-S-<Return>", lazy.spawn(browser), desc="Open Firefox"),
    
    KeyChord([mod], "e", [
        Key("c", lazy.spawn("emacsclient -cs 'jmacs' -e '(erc)'"), desc="Spawn erc with emacs client"),
        Key("e", lazy.spawn("emacsclient -cs 'jmacs' -a 'emacs'"), desc="Spawn emacs client"),
        Key("n", lazy.spawn("emacsclient -cs 'jmacs' -e '(elfeed)'"), desc="Spawn elfeed with emacs client"),
    ], mode="Emacs Apps"),

    KeyChord([mod, "shift"], "e", [
        Key("d", lazy.spawn("emacsclient -cs 'doom' -a 'emacs --with-profile=doom'"), desc="Spawn Doom Emacs client"),
        Key("j", lazy.spawn("emacsclient -cs 'jmacs' -a 'emacs'"), desc="Spawn Jmacs client"),
    ], mode="Emacs Profiles"),


        

    

    Key("C-<grave>", lazy.spawn("dunstctl close")),
]

#+end_src

** Group Bindings
This sets up the bindings for my groups - it works with KeyChords.
#+begin_src python
for group in groups:
    keys.extend([
      Key("M-{}".format(group.name), lazy.group[group.name].toscreen(), desc="Switch to group {}".format(group.name)),
      Key("M-S-{}".format(group.name), lazy.window.togroup(group.name), desc="Move focused window to group {}".format(group.name)) 
    ])

#+end_src

* Layouts
I have only a few layouts I’d like to use - a master/stack layout like in XMonad, and then a maximized layout. However, I also like to set up my floating layouts here.
** Theming
I like to have a consistant look for my layouts.
#+begin_src python
layout_theme = {
    "margin": 10,
    "border_focus": colors['purple'],
    "border_normal": colors['bg'],
    "border_width": 2
}
#+end_src

** My Main Layouts
#+begin_src python
layouts = [
    layout.MonadTall(**layout_theme),
    layout.Max(**layout_theme),
]
#+end_src

** Floating Layout
#+begin_src python

floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    *layout.Floating.default_float_rules,
    Match(wm_class='confirmreset'),  # gitk
    Match(wm_class='makebranch'),  # gitk
    Match(wm_class='maketag'),  # gitk
    Match(wm_class='ssh-askpass'),  # ssh-askpass
    Match(title='branchdialog'),  # gitk
    Match(title='pinentry'),  # GPG key password entry
    Match(wm_class='pinentry-gtk-2'), 
], **layout_theme)
#+end_src

* Bars
My bars are not that fancy in the grand scheme of things - I mainly am using a powerline effect.
** Theming
I have a few default values I'd like to set for my bars - a few colors, padding, and fonts.
#+begin_src python
widget_defaults = dict(
    font=fonts['text'],
    fontsize=14,
    padding=3,
    background = colors['bg'],
    foreground = colors['fg'],
)

extension_defaults = widget_defaults.copy()
#+end_src

** Helper Functions
*** Arrow Functions
These arrow functions are for achieving a powerline-esque effect in the qtile bar. Note that you will need a Nerd Font in order to use this.
#+begin_src python
def draw_arrow_right(bg,fg,font_size=33):
    "Creates a textbox widget with a right-pointing arrow."
    return widget.TextBox(text="",
                          padding=0,
                          fontsize=font_size,
                          background=bg,
                          foreground=fg)

def draw_arrow_left(bg,fg,font_size=33):
    "Creates a textbox widget with a right-pointing arrow."
    return widget.TextBox(text="",
                          padding=0,
                          fontsize=font_size,
                          background=bg,
                          foreground=fg)
#+end_src

*** Window Text Transform
This is from the examples in the documentation, but for my browser, I only want to see that it's firefox.
#+begin_src python :tangle no
def my_func(text):
    for string in [" — Chromium", " — Mozilla Firefox"]: 
        text = text.replace(string, "") 
    return text
#+end_src

** Weather Locations 
I like being able to get a view of the weather at a glance in my status bars, and so I am setting up a dictionary of locations here.
#+begin_src python
wttr_locs = [
    {"home": "Charlottesville"},
    {"grandmas": "Saxis"}
]
#+end_src


** Module Scripts
*** Volume
**** Icon
:PROPERTIES:
:header-args:sh: :tangle scripts/volicon.sh
:END:
This script simply prints out a corresponding icon for my volume module.
#+begin_src sh :shebang "#!/usr/bin/env bash"
VOL=$(pacmd list-sinks|grep -A 15 '* index'| awk '/volume: front/{ print $5 }' | sed 's/[%|,]//g' | xargs)

MUTED=$(pacmd list-sinks|grep -A 15 '* index'|awk '/muted:/{ print $2 }')

if [[ $MUTED == "yes" ]] 
then
    printf ""
else
    printf ""
fi
#+end_src

**** Percentage
:PROPERTIES:
:header-args:sh: :tangle scripts/printvol.sh
:END:
This prints the percentage of the volume.
#+begin_src sh :shebang "#!/usr/bin/env bash"
VOL=$(pacmd list-sinks|grep -A 15 '* index'| awk '/volume: front/{ print $5 }' | sed 's/[%|,]//g' | xargs)

MUTED=$(pacmd list-sinks|grep -A 15 '* index'|awk '/muted:/{ print $2 }')

if [[ $MUTED == "yes" ]] 
then
    printf "Muted"
else
    printf "%s%%" "$VOL"
fi
#+end_src

*** Notification Bell
:PROPERTIES:
:header-args:sh: :tangle scripts/notifbell.sh
:END:
This prints a notificaton bell.
#+begin_src sh :shebang "#!/usr/bin/env bash"

NOTIFCOUNT=$(dunstctl count displayed)

if [[ $NOTIFCOUNT == "0" ]] 
then
    printf ""
else
    printf ""
fi
#+end_src

*** Notification Count
:PROPERTIES:
:header-args:sh: :tangle scripts/notifs.sh
:END:
#+begin_src sh :shebang "#!/usr/bin/env bash"
printf $(dunstctl count displayed)
#+end_src

** Main Bar
My main bar has most of my information.
#+begin_src python
mainbar = bar.Bar([
    widget.Sep(linewidth=0,
               padding=6),
    widget.GroupBox(disable_drag=True,
                    block_highlight_text_color=colors['fg'],
                    active=colors['fg'],
                    highlight_method='line',
                    highlight_color=colors['bg'],
                    inactive=colors['gray'],
                    this_current_screen_border=colors['blue'],
                    rounded=False,
                    padding = 4,
                    font = fonts['fa']
                    ),
    draw_arrow_right(colors['blue'],
                     colors['bg']),
    widget.TextBox(text="",
                   font=fonts['material'],
                   fontsize = 14,
                   background=colors['blue']),
      widget.Clock(format="%H:%M - %a %d %b",
                 background=colors['blue']), 
    draw_arrow_right(colors['purple'],
                     colors['blue']),
    widget.CurrentLayout(background=colors['purple']),
    draw_arrow_right(colors['bg'],
                     colors['purple']),
    widget.Spacer(),
    draw_arrow_left(colors['bg'], 
                    colors['orange']),
    widget.TextBox(text="",
                   background = colors['orange'],
                   font=fonts['material'],
                   fontsize=16),
    widget.Wlan(format="{essid}",
                disconnected_message="Not Connected",
                background=colors['orange']),
    widget.Battery(format="",
                   show_short_text = False,
                   padding = 0,
                   fontsize = 33,
                   background = colors['orange'],
                   foreground = colors['blue'],
                   low_foreground = colors['red']),
    widget.Battery(format="{char}",
                   show_short_text=False,
                   charge_char = "",
                   discharge_char = "",
                   full_char = "",
                   font = fonts['material'],
                   fontsize=16,
                   background = colors['blue'],
                   low_background = colors['red']),

    widget.Battery(format="{percent:2.0%}",
                   show_short_text=False,
                   background = colors['blue'],
                   low_background = colors['red']),
   widget.Battery(format="",
                   show_short_text = False,
                   padding = 0,
                   fontsize = 33,
                   background = colors['blue'],
                   low_background = colors['red'],
                   foreground=colors['purple']),

    widget.TextBox(text="",
                   fontsize=16,
                   background=colors['purple']),

    widget.Bluetooth(hci="/dev_90_7A_58_A6_A0_0A",
                     background=colors['purple']),

    draw_arrow_left(colors['purple'],
                    colors['green']),
    widget.GenPollText(update_interval=None, 
                       func=lambda: subprocess.check_output(os.path.expanduser("~/.dotfiles/qtile/.config/qtile/scripts/volicon.sh")).decode('utf-8'),
                       font=fonts['material'],
                       fontsize=16,
                       background=colors['green']),
    
    widget.GenPollText(update_interval=None, 
                       func=lambda: subprocess.check_output(os.path.expanduser("~/.dotfiles/qtile/.config/qtile/scripts/printvol.sh")).decode('utf-8'),
                       background=colors['green']),
    
    draw_arrow_left(colors['green'],
                     colors['blue']),
    widget.TextBox(text="",
                   font=fonts['material'],
                   background=colors['blue']),
    widget.Backlight(backlight_name = "intel_backlight",
                     background=colors['blue']), 
    
    draw_arrow_left(colors['blue'],
                    colors['red']),
    widget.TextBox(text="",
                   font = fonts["material"],
                   background=colors['red'],
                   fontsize=16),
    widget.ThermalSensor(fgcolor_normal=colors['fg'],
                         fgcolor_high=colors['fg'],
                         fgcolor_crit=colors['fg'],
                         foreground=colors['fg'],
                         background=colors['red']),

    ], 30, background=colors['bg'], )
#+end_src

** Alt Bar
My alternate bar has some other things as well.
#+begin_src python
altbar = bar.Bar([
    
    widget.Sep(linewidth=0,
               padding=6),
    widget.TextBox(text="", 
                   font = fonts['material'],
                   fontsize = 12),
    widget.CheckUpdates(no_update_string="0",
                        colour_have_updates=colors['fg'],
                        colour_no_updates=colors['fg']),
    draw_arrow_right(colors['orange'],
                     colors['bg']),
    widget.CapsNumLockIndicator(background=colors['orange']),
    draw_arrow_right(colors['blue'],
                     colors['orange']),
    widget.Pomodoro(background=colors['blue'],
                    color_active=colors['fg'],
                    color_break=colors['fg'],
                    color_inactive=colors['fg']),
    draw_arrow_right(colors['bg'],
                     colors['blue']),
    widget.Chord(),
    widget.Spacer(),
    
    draw_arrow_left(colors['bg'],
                     colors['purple']),
    widget.GenPollText(update_interval=None, 
                       func=lambda: subprocess.check_output(os.path.expanduser("~/.dotfiles/qtile/.config/qtile/scripts/notifbell.sh")).decode('utf-8'),
                       fontsize=16,
                       background=colors['purple'],
                       foreground=colors['fg']),
    widget.GenPollText(update_interval=None, 
                       func=lambda: subprocess.check_output(os.path.expanduser("~/.dotfiles/qtile/.config/qtile/scripts/notifs.sh")).decode('utf-8'),
                       background=colors['purple'],
                       foreground=colors['fg']),
    
draw_arrow_left(colors['purple'],
                    colors['blue']),
    widget.Wttr(location=wttr_locs[0],
                format="%c %t (%f)",
                background=colors['blue']
                ),
     
    
], 30, background=colors['bg'])
#+end_src

* Screens
Screens are your monitors in qtile.
#+begin_src python
screens = [
    Screen(top = mainbar, bottom = altbar),
]
#+end_src


* Hooks
Hooks are scripts that can be automated in python - an example would be an init script for setting wallpapers, starting a compositor, etc.
** Autostart
This script calls some functions to automatically start.
#+begin_src python
@hook.subscribe.startup_once
def autostart():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/scripts/autostart.sh'])
#+end_src

*** Bash Script
:PROPERTIES:
:header-args:sh: :tangle scripts/autostart.sh
:END:

#+begin_src sh :shebang "#!/usr/bin/env bash"
~/.dotfiles/.screenlayout/netbook-366-768.sh
xset b off
picom -b 
feh --bg-center ~/wallpapers/gruvbox/pacman.png
redshift -l $(curl -s "https://location.services.mozilla.com/v1/geolocate?key=geoclue" | jq -r '"\(.location.lat):\(.location.lng)"') &
emacs --daemon &
emacs --with-profile=doom --daemon &
#+end_src
